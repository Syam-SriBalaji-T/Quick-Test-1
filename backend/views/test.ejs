<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h2>hello</h2>
    <h2><%= data.title %></h2>
    <div id="timer">
        <div style="font-family: monospace;" id="hours">00</div>
        <div style="font-family: monospace;" id="minutes">00</div>
        <div style="font-family: monospace;" id="seconds">00</div>
    </div>
    <div id="sectionsBlock">
        <% for(let i = 0; i < data.sections.length ; i++) { %>
            <button id="<%= `section${i}` %>" class="sectionButtons"><%= data.sections[i].subject %></button>
        <% } %>
    </div>
    <div id="questionButtonsBlock">
        <% for(let i = 0 ; i < data.sections.length ; i++) { %>
            <div id="<%= `section${i}Questions` %>" style="display : none">
                <% for(let j = 0; j < data.sections[i].questionsCount; j++) { %>
                    <div id="<%= `section${i}question${j}button` %>">
                    <button class="questionButtons" id="<%= `${questions[i][j]._id}button` %>"><%= j+1 %></button>
                    </div>
                <% } %>
            </div>
        <% } %>
    </div>
    <div id="questionBlock">
        <% for(let i = 0 ; i < questions.length ; i++) { %>
            <div id="<%= `section${i}` %>">
            <% for(let j = 0 ; j < questions[i].length ; j++) { %> 
                <div id="<%= `section${i}question${j}` %>" style="display: none ;">
                <div id="<%= questions[i][j]._id %>">
                    <h4 id="<%= `section${i}question${j}statement` %>"><%= questions[i][j].statement %></h4>
                    <div id="<%= `section${i}question${j}optionsblock` %>">
                        <% for(let k = 0 ; k < questions[i][j].options.length ; k++) { %>
                            <div>
                            <input type="radio" name="<%= `section${i}question${j}options` %>" value="<%= questions[i][j].options[k] %>" id="<%= `section${i}question${j}option${k}` %>">
                            <label for="<%= `section${i}question${j}option${k}` %>"><%= questions[i][j].options[k] %></label><br>
                            </div>
                        <% } %>
                    </div>
                </div>
                </div>
            <% } %>
        <% } %>
            </div>
    </div>
    <div id="navigationbuttons">
        <button id="previous">previous</button>
        <button id="saveandnext">save and next</button>
        <button id="markforreview">mark for review</button>
    </div>
    <div>
        <button id="submitButton">submit</button>
    </div>

<script>
    localStorage.setItem('token', "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6ZmFsc2UsImVtYWlsSWQiOiJrdXNod2FudGhzaXN0dUBnbWFpbC5jb20iLCJpYXQiOjE3NTA4NTYxNTQsImV4cCI6MTc1MDg5MjE1NH0.slQxK_8asPjbEItttA-WBjZ1H4BRza7oSu8tT9Z6r_s");
    const parts = window.location.href.split("/");
    const examId = parts[parts.length - 1];
    document.getElementById(`section${0}`).style.backgroundColor = "yellow" ;
    let answerMap ;


    document.addEventListener("DOMContentLoaded", async () => {
        const parts = window.location.href.split("/");
        const examId = parts[parts.length - 1];
        fetch(`http://localhost:3000/api/user/getOptions/${examId}`, {
        method: 'GET',
        headers: {
            'Authorization' : `Bearer ${localStorage.getItem('token')}`
        }
        })
        .then(res => {
            // if(res.status == 500) {
            //     throw new Error("Internal server Error") ;
            // }
            return res.json() ;
        })
        .then(data => {
            answerMap = new Map(data.data) ;
            console.log(answerMap) ;
            displayQuestion() ;
        })
        .catch(err => {
            // console.log(error) ;
            alert("Internal Server Error, unable to load the details. try refreshing the page")
        });
        
        fetch(`http://localhost:3000/api/user/getButtonsStatus/${examId}`, {
        method: 'GET',
        headers: {
            'Authorization' : `Bearer ${localStorage.getItem('token')}`
        }
        })
        .then(res => {
            if(res.status == 500) {
                throw new Error("Internal server Error") ;
            }
            return res.json() ;
        })
        .then(data => {
            data = data.data ;
            console.log(data) ;
            for(let i=0;i<data.length;i++) {
                if(data[i].type == 1) {
                    document.getElementById(`${data[i].questionId}button`).style.backgroundColor = "green" ;
                }
                else {
                    document.getElementById(`${data[i].questionId}button`).style.backgroundColor = "purple" ;
                }
                document.getElementById(`section${0}question${0}button`).childNodes[1].style.backgroundColor = "blue" ;
            }
        })
        .catch(err => {
            // console.log(error) ;
            alert("Internal Server Error, unable to load the details. try refreshing the page")
        });
        
        fetch(`http://localhost:3000/api/user/getTimer/${examId}`, {
        method: 'GET',
        headers: {
            'Authorization' : `Bearer ${localStorage.getItem('token')}`
        }
        })
        .then(res => {
            // if(res.status == 500) {
            //     throw new Error("Internal server Error") ;
            // }
            return res.json() ;
        })
        .then(data => {
            setTimer(data.data) ;
        })
        .catch(err => {
            // console.log(error) ;
            alert("Internal Server Error, unable to load the details. try refreshing the page")
        });


    })

    let hours = 0 ;
    let minutes = 0 ;
    let seconds = 0 ;
    let hoursDisplay = document.getElementById("hours") ;
    let minutesDisplay = document.getElementById("minutes") ;
    let secondsDisplay = document.getElementById("seconds") ;

    function setTimer(time) {
        hours = Math.floor((parseInt(time)/60)) ;
        minutes = parseInt(time)%60 ;
        //alert(hours);
        hoursDisplay.innerText = hours ;
        minutesDisplay.innerText = minutes ;
        secondsDisplay.innerText = seconds ;
        const IntervalId = setInterval(() => {
            if(seconds != 0) {
                seconds = seconds - 1 ;
            }
            else {
                if(minutes != 0) {
                    updatetime(hours, minutes) ;
                    minutes = minutes-1 ;
                    seconds = 59 ;
                }
                else {
                    if(hours != 0) {
                        updatetime(hours, minutes) ;
                        hours = hours - 1 ;
                        minutes = 59 ;
                        seconds = 59 ;
                    }
                    else {
                        clearInterval(IntervalId) ;
                        finalSubmitFunction() ;
                        // clearInterval(IntervalId) ;
                    }
                }
            }
            hoursDisplay.innerText = hours ;
            minutesDisplay.innerText = minutes ;
            secondsDisplay.innerText = seconds ;
        }, 1000) ;
    }

    function updatetime(hours, minutes) {
        let timeRemaining = hours * 60 + minutes ;
        fetch(`http://localhost:3000/api/user/updateTimer/${examId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json' ,
                'Authorization' : `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({
                timeRemaining : timeRemaining
            })
            })
            .then(response => response.json()) // Parse JSON response
            .then(data => {
            console.log('Success:', data);
            })
            .catch(error => {
            console.error('Error:', error);
            // alert("question data not saved successfully") ;
            });

    }

    document.getElementById("submitButton").addEventListener("click", ()=> {
        finalSubmitFunction() ;
    })

    function finalSubmitFunction() {
        fetch(`http://localhost:3000/api/user/submitTest/${examId}`, {
        method: 'GET',
        headers: {
            'Authorization' : `Bearer ${localStorage.getItem('token')}`
        }
        })
        .then(res => {
            // if(res.status == 500) {
            //     throw new Error("Internal server Error") ;
            // }
            return res.json() ;
        })
        .then(data => {
            alert("test is done") ;
        })
        .catch(err => {
            // console.log(error) ;
            alert("Internal Server Error, unable to load the details. try refreshing the page")
        });

    }

    document.getElementById("section0Questions").style.display = "block" ;
    let section = 0 ;
    let question = 0 ;
    document.getElementById("previous").addEventListener('click', async(req, res) => {
        saveQuestion(1, section, question) ;
        if(question == 0) {
            document.getElementById(`section${section}question${question}button`).childNodes[1].style.backgroundColor = "blue" ;
            return 0 ;
        }
        document.getElementById(`section${section}question${question}`).style.display = "none" ;
        question = question - 1 ;
        displayQuestion() ;
    })
    document.getElementById("markforreview").addEventListener('click', async(req, res) => {
        saveQuestion(2, section, question) ;
        let x = document.getElementById(`section${section}Questions`).childElementCount ;
        if(question == x-1) {
            document.getElementById(`section${section}question${question}button`).childNodes[1].style.backgroundColor = "blue" ;
            return ;
        }
        document.getElementById(`section${section}question${question}`).style.display = "none" ;
        question = question + 1 ;
        displayQuestion(document.getElementById(`section${section}question${question}button`).childNodes[1]) ;
    })
    function saveQuestion(type, givenSection, givenQuestion) {
        let x = document.getElementById(`section${givenSection}question${givenQuestion}optionsblock`).childElementCount ;
        let value = "" ;
        let optionNumber = -1 ;
        for(let i=0;i<x;i++) {
            let element = document.getElementById(`section${givenSection}question${givenQuestion}option${i}`) ;
            if(element.checked) {
                value = element.value ;
                optionNumber = i ;
            }
        }
        let question_id = document.getElementById(`section${givenSection}question${givenQuestion}optionsblock`).parentElement.id ;
        answerMap.set(question_id, value) ;
        if(optionNumber == -1) {
            fetch(`http://localhost:3000/api/user/submitAnswer/${question_id}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json' ,
                'Authorization' : `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({
                examId : examId,
                answer : value,
                type : 0
            })
            })
            .then(response => response.json()) // Parse JSON response
            .then(data => {
            console.log('Success:', data);
            })
            .catch(error => {
            console.error('Error:', error);
            alert("question data not saved successfully") ;
            });
            document.getElementById(`section${givenSection}question${givenQuestion}button`).childNodes[1].style.backgroundColor = "white" ;
            return ;
        }
        if(type == 1) {
            document.getElementById(`section${givenSection}question${givenQuestion}button`).childNodes[1].style.backgroundColor = "green" ;
        }
        else if(type == 2) {
            document.getElementById(`section${givenSection}question${givenQuestion}button`).childNodes[1].style.backgroundColor = "purple" ;
        }
        else {
            document.getElementById(`section${givenSection}question${givenQuestion}button`).childNodes[1].style.backgroundColor = "white" ;
        }
        // let question_id = document.getElementById(`section${givenSection}question${givenQuestion}optionsblock`).parentElement.id ;
        // alert(question_id) ;
        fetch(`http://localhost:3000/api/user/submitAnswer/${question_id}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json' ,
                'Authorization' : `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({
                examId : examId,
                answer : value,
                type : type
            })
            })
            .then(response => response.json()) // Parse JSON response
            .then(data => {
            console.log('Success:', data);
            })
            .catch(error => {
            console.error('Error:', error);
            alert("question data not saved successfully") ;
            });
    }
    document.getElementById("saveandnext").addEventListener("click", async(req, res) => {
        saveQuestion(1, section, question) ;
        let x = document.getElementById(`section${section}Questions`).childElementCount ;
        if(question == x-1) {
            document.getElementById(`section${section}question${question}button`).childNodes[1].style.backgroundColor = "blue" ;
            return ;
        }
        document.getElementById(`section${section}question${question}`).style.display = "none" ;
        question = question + 1 ;
        displayQuestion() ;
    })
    function displayQuestion() {
        document.getElementById(`section${section}question${question}`).style.display = "block" ;
        let question_id = document.getElementById(`section${section}question${question}optionsblock`).parentElement.id ;
        if(answerMap.has(question_id)) {
            let data = answerMap.get(question_id) ;
            let x = document.getElementById(`section${section}question${question}optionsblock`).childElementCount ;
            for(let i=0;i<x;i++) {
                let element = document.getElementById(`section${section}question${question}option${i}`) ;
                let y = element.value ;
                if(y == data) {
                    element.checked = true ;
                }
            }
        }
        document.getElementById(`section${section}question${question}button`).childNodes[1].style.backgroundColor = "blue" ;
    }


document.getElementById("questionButtonsBlock").addEventListener("click", async(e) => {
    if(e.target.className == "questionButtons") {
        saveQuestion(1, section, question) ;
        let str = e.target.parentElement.id ;
        document.getElementById(`section${section}question${question}`).style.display = "none" ;
        section = parseInt(str.split("section")[1].split("question")[0]);
        question = parseInt(str.split("question")[1].split("button")[0]);
        displayQuestion() ;
    }
})

document.getElementById("sectionsBlock").addEventListener("click", (e) => {
    if(e.target.className == "sectionButtons") {
        saveQuestion(1, section, question) ;
        let str = e.target.id ;
        const sectionNumber = parseInt(str.slice(7));
        document.getElementById(`section${section}`).style.backgroundColor = "white" ;
        document.getElementById(`section${section}Questions`).style.display = "none" ;
        document.getElementById(`section${section}question${question}`).style.display = "none" ;
        section = parseInt(str.slice(7));
        question = 0 ;
        document.getElementById(`section${section}`).style.backgroundColor = "yellow" ;
        document.getElementById(`section${section}Questions`).style.display = "block" ;
        displayQuestion() ;
    }
})

</script>

</body>
</html>